swagger: "2.0"
info:
  description: "Api documentation for FltShr"
  version: "1.0.0"
  title: "FltShr_API"
host: "localhost:81"
schemes:
  - "http"

paths:
  /login:
    post:
      tags:
        - Login
      summary: Login endpoint
      parameters:
        - in: body
          name: user
          description: The user to create.
          schema:
            $ref: "#/definitions/UserLoginDTO"
      consumes:
        - "application/json"
      responses:
        200:
          description: OK
          headers:
            Authorization:
              type: string
              description: Bearer Token JWT
  /users:
    get:
      tags:
        - Users
      summary: Get all Users lists
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/UserNameDTO"
  /shopping/lists:
    get:
      tags:
        - Shopping_Lists
      summary: Get all shopping lists
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/ShoppingListDTO"
  /shopping/list:
    post:
      tags:
        - Shopping_Lists
      summary: Crate new shopping list
      parameters:
        - in: body
          name: ShoppingListDTO
          description: Shopping list to create.
          schema:
            $ref: "#/definitions/ShoppingListDTO"
      responses:
        201:
          description: Created
          schema:
            type: object
            $ref: "#/definitions/ShoppingListDTO"
  /shopping/list/{listId}:
    delete:
      tags:
        - Shopping_Lists
      summary: Delete shopping list
      parameters:
        - name: id
          in: path
          description: Shopping List Id
          type: integer
          required: true
      responses:
        200:
          description: "OK"
  /shopping/items:
    get:
      tags:
        - Shopping_Lists
      summary: Get all shopping items
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/ShoppingItemDTO"
  /shopping/list/{listId}/entries:
    get:
      tags:
        - Shopping_Lists
      summary: Get all shopping entries
      parameters:
        - name: id
          in: path
          description: Shopping List Id
          type: integer
          required: true
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/ShoppingEntryDTO"

  /shopping/list/{listId}/item:
    post:
      tags:
        - Shopping_Lists
      summary: Create shopping entry
      description: Assign item for list or create new item if not exist and then assign.
      parameters:
        - name: id
          in: path
          description: Shopping List Id
          type: integer
          required: true
        - in: body
          name: ShoppingListDTO
          description: Shopping item to create in list.
          schema:
            type: object
            $ref: "#/definitions/ShoppingItemDTO"
      responses:
        201:
          description: Created
          schema:
            type: object
            $ref: "#/definitions/ShoppingItemDTO"
  /shopping/list/{listId}/item/{itemId}:
    delete:
      tags:
        - Shopping_Lists
      summary: Delete shopping entry by Item
      parameters:
        - name: listId
          in: path
          description: Shopping List Id
          type: integer
          required: true
        - name: itemId
          in: path
          description: Shopping Item
          type: integer
          required: true
      responses:
        200:
          description: OK
    patch:
      tags:
        - Shopping_Lists
      summary: Set shopping entry as Bought by Item
      parameters:
        - name: listId
          in: path
          description: Shopping List Id
          type: integer
          required: true
        - name: itemId
          in: path
          description: Shopping Item
          type: integer
          required: true
      responses:
        200:
          description: OK
          schema:
            type: boolean

  /expense/lists:
    get:
      tags:
        - Expenses
      summary: Get all ExpenseLists
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/ExpenseListDTO"
  /expense/list:
    post:
      tags:
        - Expenses
      summary: Create new ExpenseList
      parameters:
        - in: body
          name: ExpenseListCDTO
          description: ExpenseList Creation DTO
          schema:
            $ref: "#/definitions/ExpenseListCDTO"
      responses:
        201:
          description: Created
          schema:
            type: object
            $ref: "#/definitions/ExpenseListDTO"
  /expense/list/{listId}/expenses:
    get:
      tags:
        - Expenses
      summary: Get all Expenses of a ExpenseList
      parameters:
        - name: listId
          in: path
          description: ExpenseList Id
          type: integer
          required: true
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/ExpenseDTO"
  /expense/list/{listId}/expense:
    post:
      tags:
        - Expenses
      summary: Create new Expense
      parameters:
        - name: listId
          in: path
          description: ExpenseList Id
          type: integer
          required: true
        - in: body
          name: ExpenseCDTO
          description: Expense Creation DTO
          schema:
            $ref: "#/definitions/ExpenseCDTO"
      responses:
        201:
          description: Created
          schema:
            type: object
            $ref: "#/definitions/ExpenseDTO"
  /expense/list/{listId}/expense/{expenseId}:
    delete:
      tags:
        - Expenses
      summary: Delete Expense
      parameters:
        - name: listId
          in: path
          description: ExpenseList Id
          type: integer
          required: true
        - name: expenseId
          in: path
          description: Expense Id
          type: integer
          required: true
      responses:
        200:
          description: OK
  /manager/expense/list/{listId}:
    patch:
      tags:
        - Expenses
      summary: Settle list (change isSettled)
      parameters:
        - name: listId
          in: path
          description: ExpenseList Id
          type: integer
          required: true
      responses:
        200:
          description: "OK"
    delete:
      tags:
        - Expenses
      summary: Delete list
      parameters:
        - name: listId
          in: path
          description: ExpenseList Id
          type: integer
          required: true
      responses:
        200:
          description: "OK"


  /chores/assignedqueues:
    get:
      tags:
        - Queue_Chores
      summary: Get all QueueChoresAssigned of All Users
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/AssignedQueueChoreDTO"

  /chores/assignedqueues/me:
    get:
      tags:
        - Queue_Chores
      summary: Get all QueueChoresAssigned of User that aren't Done
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/AssignedQueueChoreDTO"

  /chores/assignedqueue/{queueChoreId}:
    patch:
      tags:
        - Queue_Chores
      summary: Set QueueChore as Done and autoassign next
      parameters:
        - name: queueChoreId
          in: path
          description: QueueChore Id
          type: integer
          required: true
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: "#/definitions/AssignedQueueChoreDTO"

  /manager/chores/queuechores:
    get:
      tags:
        - Queue_Chores
      summary: Get all QueueChores
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/QueueChoreDTO"

  /manager/chores/queuechore/user/{userId}:
    post:
      tags:
        - Queue_Chores
      summary: Create new QueueChore and assign to first User
      parameters:
        - name: userId
          in: path
          description: user Id
          type: integer
          required: true
        - in: body
          name: ExpenseCDTO
          description: Expense Creation DTO
          schema:
            $ref: "#/definitions/QueueChoreCDTO"
      responses:
        201:
          description: Created
          schema:
            type: object
            $ref: "#/definitions/QueueChoreDTO"
  /manager/chores/queuechore/archive/{queueChoreId}:
    delete:
      tags:
        - Queue_Chores
      summary: Archive QueueChore
      parameters:
        - name: queueChoreId
          in: path
          description: QueueChore Id
          type: integer
          required: true
      responses:
        200:
          description: "Ok"

#  /manager/assignedqueue/{queueChoreId}:
#    patch:
#      tags:
#        - Queue_Chores
#      summary: Revert Currert assign and Create for previous User
#      parameters:
#        - name: queueChoreId
#          in: path
#          description: QueueChore Id
#          type: integer
#          required: true
#      responses:
#        200:
#          description: "OK"

  /chores/assignedfrequents:
    get:
      tags:
        - Frequent_Chores
      summary: Get all AssignedFrequentChores of All Users
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/AssignedFrequentChoreDTO"
  /chores/assignedfrequents/todo:
    get:
      tags:
        - Frequent_Chores
      summary: Get all AssignedFrequentChores of User that aren't Done
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/AssignedFrequentChoreDTO"
  /chores/assignedfrequents/my:
    get:
      tags:
        - Frequent_Chores
      summary: Get all AssignedFrequentChores of User that aren't Reassigned
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/AssignedFrequentChoreDTO"
  /chores/assignedfrequent/{frequentChoreId}:
    patch:
      tags:
        - Frequent_Chores
      summary: Set FreqentChore as Done
      parameters:
        - name: frequentChoreId
          in: path
          description: FrequentChore Id
          type: integer
          required: true
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: "#/definitions/AssignedFrequentChoreDTO"
  /manager/chores/frequentchores:
    get:
      tags:
        - Frequent_Chores
      summary: Get all FrequentChores
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/FrequentChoreDTO"
  /manager/chores/frequentchore/user/{userId}/date/{dateAssigned}:
    post:
      tags:
        - Frequent_Chores
      summary: Create new FrequentChores and assign to User
      parameters:
        - name: userId
          in: path
          description: user Id
          type: integer
          required: true
        - name: dateAssigned
          in: path
          description: Assign Date String "yyyy-MM-dd hh:mm:ss"
          type: integer
          required: true
        - in: body
          name: FrequentChoreCDTO
          description: FrequentChore creation DTO
          schema:
            $ref: "#/definitions/FrequentChoreCDTO"
      responses:
        201:
          description: Created
          schema:
            type: object
            $ref: "#/definitions/FrequentChoreDTO"
  /manager/chores/frequentchore/archive/{frequentChoreId}:
    delete:
      tags:
        - Frequent_Chores
      summary: Archive FrequentChore
      parameters:
        - name: frequentChoreId
          in: path
          description: FrequentChore Id
          type: integer
          required: true
      responses:
        202:
          description: "Archived"
          schema:
            type: object
            $ref: "#/definitions/FrequentChoreDTO"

  /test/all:
    get:
      tags:
        - Role_Test
      summary: Testing public endpoint
      produces:
        - "text/plain"
      responses:
        200:
          description: OK
          schema:
            type: string
  /test/user:
    get:
      tags:
        - Role_Test
      summary: Testing endpoint for logged in users
      produces:
        - "text/plain"
      responses:
        200:
          description: OK
          schema:
            type: "string"
  /test/manager:
    get:
      tags:
        - Role_Test
      summary: Testing endpoint for ROLE_MANAGER
      produces:
        - "text/plain"
      responses:
        200:
          description: OK
          schema:
            type: "string"
  /test/admin:
    get:
      tags:
        - Role_Test
      summary: Testing endpoint for ROLE_ADMIN
      produces:
        - "text/plain"
      responses:
        200:
          description: OK
          schema:
            type: string

definitions:
  QueueChoreDTO:
    type:  object
    properties:
      id:
        type: integer
      name:
        type: string
      description:
        type: string

  QueueChoreCDTO:
    type:  object
    properties:
      name:
        type: string
      description:
        type: string
      archived:
        type: boolean

  AssignedQueueChoreDTO:
    type:  object
    properties:
      id:
        type: integer
      user:
        $ref: '#/definitions/UserNameDTO'
      chore:
        $ref: '#/definitions/QueueChoreDTO'
      assignDate:
        type: string
      done:
        type: boolean
      doneDate:
        type: string

  FrequentChoreDTO:
    type:  object
    properties:
      id:
        type: integer
      name:
        type: string
      description:
        type: string
      active:
        type: boolean
      durationDays:
        type: integer
      freqencyDays:
        type: integer

  FrequentChoreCDTO:
    type:  object
    properties:
      name:
        type: string
      description:
        type: string
      durationDays:
        type: integer
      freqencyDays:
        type: integer

  AssignedFrequentChoreDTO:
    type:  object
    properties:
      id:
        type: integer
      user:
        $ref: '#/definitions/UserNameDTO'
      chore:
        $ref: '#/definitions/FrequentChoreDTO'
      assignDate:
        type: string
      reassigned:
          type: boolean
      done:
        type: boolean
      doneDate:
        type: string

  ExpenseListDTO:
    type:  object
    properties:
      id:
        type: integer
      name:
        type: string
      isSettled:
        type: boolean
  ExpenseListCDTO:
    type:  object
    properties:
      name:
        type: string
  ExpenseDTO:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      total:
        type: integer
      isEqual:
        type: boolean
      paidBy:
        $ref: "#/definitions/UserNameDTO"
      boughtDate:
        type: string
      description:
        type: string
      expenseUnequals:
        type: array
        items:
          $ref: "#/definitions/ExpenseUnequalDTO"
  ExpenseCDTO:
    type: object
    properties:
      name:
        type: string
      total:
        type: integer
      isEqual:
        type: boolean
      description:
        type: string
      expenseUnequals:
        type: array
        items:
          $ref: "#/definitions/ExpenseUnequalCDTO"
  ExpenseUnequalDTO:
    type: object
    properties:
      id:
        type: integer
      units:
        type: integer
      percent:
        type: integer
      usedBy:
        $ref: "#/definitions/UserNameDTO"
  ExpenseUnequalCDTO:
    type: object
    properties:
      usedBy:
        $ref: "#/definitions/UserNameDTO"
      units:
        type: integer
      percent:
        type: integer


  ShoppingListDTO:
    type:  object
    properties:
      id:
        type:  integer
      description:
        type:  string

  ShoppingItemDTO:
    type:  object
    properties:
      id:
        type:  integer
      description:
        type:  string

  ShoppingEntryDTO:
    type: object
    properties:
      id:
        type: integer
      shoppingItem:
        $ref: "#/definitions/ShoppingItemDTO"
      user:
        $ref: "#/definitions/UserNameDTO"
      isBought:
        type: boolean

  UserNameDTO:
    type:  object
    properties:
      id:
        type: integer
      username:
        type: string

  UserLoginDTO:
    type: object
    properties:
      username:
        type: string
      password:
        type: string

