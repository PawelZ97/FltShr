openapi: 3.0.0
info:
  description: Api documentation for FltShr
  version: 1.0.0
  title: FltShr_API

paths:
  /users:
    get:
      tags:
        - Account
      summary: Get all Users lists
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserNameDTO"
  /login:
    post:
      tags:
        - Account
      summary: Login endpoint
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLoginDTO"
        description: The user to create.
      responses:
        "200":
          description: OK
          headers:
            Authorization:
              description: Bearer Token JWT
              schema:
                type: string
  /register:
    post:
      tags:
        - Account
      summary: Registration endpoint
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegistrationDTO"
        description: Data to register new User.
      responses:
        "200":
          description: OK
  /register/emailconfirm:
    get:
      tags:
        - Account
      summary: Email confirmation endpoint
      parameters:
        - in: query
          name: token
          description: Email verification token send in Email
          schema:
            type: string
      responses:
        "200":
          description: OK
  /changepassword:
    post:
      tags:
        - Account
      summary: Password Change
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                newPassword:
                  type: string
                newPasswordRetype:
                  type: string
        description: Passord Change DTO
      responses:
        "200":
          description: OK
  /requestdelete:
    post:
      tags:
        - Account
      summary: Sign for Account delete
      responses:
        "200":
          description: OK
  /admin/user/requestingdelete:
    get:
      tags:
        - Admin
      summary: User requesting account deletion
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserNameDTO"
  "/admin/user/{userId}archive":
    delete:
      tags:
        - Admin
      summary: User Archive
      parameters:
        - name: userId
          in: path
          description: UserId
          required: true
          schema:
            type: integer
      responses:
        "202":
          description: Accepted
  "/admin/user/{userId}/changemanager":
    patch:
      tags:
        - Admin
      summary: Manager change
      parameters:
        - name: userId
          in: path
          description: UserId to become Manager
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
  /shopping/lists:
    get:
      tags:
        - Shopping_Lists
      summary: Get all shopping lists
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ShoppingListDTO"
  /shopping/list:
    post:
      tags:
        - Shopping_Lists
      summary: Crate new shopping list
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ShoppingListCDTO"
        description: Shopping list to create.
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ShoppingListDTO"
  "/manager/shopping/list/{listId}/archive":
    delete:
      tags:
        - Shopping_Lists
      summary: Archive shopping list
      parameters:
        - name: listId
          in: path
          description: Shopping List Id
          required: true
          schema:
            type: integer
      responses:
        "202":
          description: Archived
  /shopping/items:
    get:
      tags:
        - Shopping_Lists
      summary: Get all shopping items
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ShoppingItemDTO"
  "/shopping/list/{listId}/entries":
    get:
      tags:
        - Shopping_Lists
      summary: Get all shopping entries
      parameters:
        - name: listId
          in: path
          description: Shopping List Id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ShoppingEntryDTO"
  "/shopping/list/{listId}/item":
    post:
      tags:
        - Shopping_Lists
      summary: Create shopping entry
      description: Assign item for list or create new item if not exist and then assign.
      parameters:
        - name: listId
          in: path
          description: Shopping List Id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ShoppingItemDTO"
        description: Shopping item to create in list.
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ShoppingItemDTO"
  "/shopping/list/{listId}/item/{itemId}":
    delete:
      tags:
        - Shopping_Lists
      summary: Delete shopping entry by Item
      parameters:
        - name: listId
          in: path
          description: Shopping List Id
          required: true
          schema:
            type: integer
        - name: itemId
          in: path
          description: Shopping Item
          required: true
          schema:
            type: integer
      responses:
        "202":
          description: Accepted
    patch:
      tags:
        - Shopping_Lists
      summary: Set shopping entry as Bought by Item
      parameters:
        - name: listId
          in: path
          description: Shopping List Id
          required: true
          schema:
            type: integer
        - name: itemId
          in: path
          description: Shopping Item
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ShoppingEntryDTO"
  /expense/lists:
    get:
      tags:
        - Expenses
      summary: Get all ExpenseLists that are not Settled
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExpenseListDTO"
  /expense/list:
    post:
      tags:
        - Expenses
      summary: Create new ExpenseList
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExpenseListCDTO"
        description: ExpenseList Creation DTO
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExpenseListDTO"
  "/expense/list/{listId}/expenses":
    get:
      tags:
        - Expenses
      summary: Get all Expenses of a ExpenseList
      parameters:
        - name: listId
          in: path
          description: ExpenseList Id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExpenseDTO"
  "/expense/list/{listId}/expense":
    post:
      tags:
        - Expenses
      summary: Create new Expense
      parameters:
        - name: listId
          in: path
          description: ExpenseList Id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExpenseCDTO"
        description: Expense Creation DTO
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExpenseDTO"
  "/expense/list/{listId}/expense/{expenseId}":
    delete:
      tags:
        - Expenses
      summary: Delete Expense
      parameters:
        - name: listId
          in: path
          description: ExpenseList Id
          required: true
          schema:
            type: integer
        - name: expenseId
          in: path
          description: Expense Id
          required: true
          schema:
            type: integer
      responses:
        "202":
          description: Accepted
  /manager/expense/lists:
    get:
      tags:
        - Expenses
      summary: Get all ExpenseLists
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExpenseListDTO"
  "/manager/expense/list/{listId}/settle":
    get:
      tags:
        - Expenses
      summary: Get ExpenseList SettleUp Summary
      parameters:
        - name: listId
          in: path
          description: ExpenseList Id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExpenseSettleUpDTO"
    patch:
      tags:
        - Expenses
      summary: Settle list (change isSettled)
      parameters:
        - name: listId
          in: path
          description: ExpenseList Id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: OK
  /chores/assignedqueues:
    get:
      tags:
        - Queue_Chores
      summary: Get all QueueChoresAssigned of All Users
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AssignedQueueChoreDTO"
  /chores/assignedqueues/me:
    get:
      tags:
        - Queue_Chores
      summary: Get all QueueChoresAssigned of User that aren't Done
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AssignedQueueChoreDTO"
  "/chores/assignedqueue/{queueChoreId}":
    patch:
      tags:
        - Queue_Chores
      summary: Set QueueChore as Done and autoassign next
      parameters:
        - name: queueChoreId
          in: path
          description: QueueChore Id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssignedQueueChoreDTO"
  /manager/chores/queuechores:
    get:
      tags:
        - Queue_Chores
      summary: Get all QueueChores
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/QueueChoreDTO"
  /manager/chores/queuechore:
    post:
      tags:
        - Queue_Chores
      summary: Create new QueueChore and assign to first User
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QueueChoreCDTO"
        description: Expense Creation DTO
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueueChoreDTO"
  "/manager/chores/queuechore/{queueChoreId}/archive":
    delete:
      tags:
        - Queue_Chores
      summary: Archive QueueChore
      parameters:
        - name: queueChoreId
          in: path
          description: QueueChore Id
          required: true
          schema:
            type: integer
      responses:
        "202":
          description: Archived
  /chores/assignedfrequents:
    get:
      tags:
        - Frequent_Chores
      summary: Get all AssignedFrequentChores of All Users
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AssignedFrequentChoreDTO"
  /chores/assignedfrequents/todo:
    get:
      tags:
        - Frequent_Chores
      summary: Get all AssignedFrequentChores of User that aren't Done
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AssignedFrequentChoreDTO"
  /chores/assignedfrequents/my:
    get:
      tags:
        - Frequent_Chores
      summary: Get all AssignedFrequentChores of User that aren't Reassigned
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AssignedFrequentChoreDTO"
  "/chores/assignedfrequent/{frequentChoreId}":
    patch:
      tags:
        - Frequent_Chores
      summary: Set FreqentChore as Done
      parameters:
        - name: frequentChoreId
          in: path
          description: FrequentChore Id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssignedFrequentChoreDTO"
  /manager/chores/frequentchores:
    get:
      tags:
        - Frequent_Chores
      summary: Get all FrequentChores
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FrequentChoreDTO"
  /manager/chores/frequentchore:
    post:
      tags:
        - Frequent_Chores
      summary: Create new FrequentChores and assign to User
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FrequentChoreCDTO"
        description: FrequentChore creation DTO  - Assign Date ISO 8601
          "yyyy-MM-ddThh:mm:ss"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FrequentChoreDTO"
  "/manager/chores/frequentchore/{frequentChoreId}/archive":
    delete:
      tags:
        - Frequent_Chores
      summary: Archive FrequentChore
      parameters:
        - name: frequentChoreId
          in: path
          description: FrequentChore Id
          required: true
          schema:
            type: integer
      responses:
        "202":
          description: Archived
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FrequentChoreDTO"
  /test/all:
    get:
      tags:
        - Role_Test
      summary: Testing public endpoint
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /test/user:
    get:
      tags:
        - Role_Test
      summary: Testing endpoint for logged in users
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /test/manager:
    get:
      tags:
        - Role_Test
      summary: Testing endpoint for ROLE_MANAGER
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /test/admin:
    get:
      tags:
        - Role_Test
      summary: Testing endpoint for ROLE_ADMIN
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
servers:
  - url: http://localhost:81
    description: Development server
  - url: https://pawelzych.pl/api
    description: Production server
components:
  schemas:
    QueueChoreDTO:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        archived:
          type: boolean
    QueueChoreCDTO:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        firstUser:
          $ref: "#/components/schemas/UserNameDTO"
    AssignedQueueChoreDTO:
      type: object
      properties:
        id:
          type: integer
        assignedUser:
          $ref: "#/components/schemas/UserNameDTO"
        queueChore:
          $ref: "#/components/schemas/QueueChoreDTO"
        assignDate:
          type: string
        done:
          type: boolean
        doneDate:
          type: string
    FrequentChoreDTO:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        durationDays:
          type: integer
        frequencyDays:
          type: integer
        archived:
          type: boolean
    FrequentChoreCDTO:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        durationDays:
          type: integer
        frequencyDays:
          type: integer
        user:
          $ref: "#/components/schemas/UserNameDTO"
        date:
          type: string
    AssignedFrequentChoreDTO:
      type: object
      properties:
        id:
          type: integer
        assignedUser:
          $ref: "#/components/schemas/UserNameDTO"
        fequentChore:
          $ref: "#/components/schemas/FrequentChoreDTO"
        assignDate:
          type: string
        reassigned:
          type: boolean
        done:
          type: boolean
        doneDate:
          type: string
    ExpenseListDTO:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        isSettled:
          type: boolean
    ExpenseListCDTO:
      type: object
      properties:
        name:
          type: string
    ExpenseDTO:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        total:
          type: integer
        unequalType:
          type: string
        paidBy:
          $ref: "#/components/schemas/UserNameDTO"
        boughtDate:
          type: string
        description:
          type: string
        expenseUnequals:
          type: array
          items:
            $ref: "#/components/schemas/ExpenseUnequalDTO"
    ExpenseSettleUpDTO:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/UserNameDTO"
        total:
          type: integer
        transfer:
          type: array
          items:
            type: integer
    ExpenseCDTO:
      type: object
      properties:
        name:
          type: string
        total:
          type: integer
        unequalType:
          type: string
        description:
          type: string
        expenseUnequals:
          type: array
          items:
            $ref: "#/components/schemas/ExpenseUnequalCDTO"
    ExpenseUnequalDTO:
      type: object
      properties:
        id:
          type: integer
        value:
          type: integer
        units:
          type: integer
        percent:
          type: integer
        usedBy:
          $ref: "#/components/schemas/UserNameDTO"
    ExpenseUnequalCDTO:
      type: object
      properties:
        usedBy:
          $ref: "#/components/schemas/UserNameDTO"
        value:
          type: integer
        units:
          type: integer
        percent:
          type: integer
    ShoppingListDTO:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
    ShoppingListCDTO:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
    ShoppingItemDTO:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
    ShoppingEntryDTO:
      type: object
      properties:
        id:
          type: integer
        shoppingItem:
          $ref: "#/components/schemas/ShoppingItemDTO"
        user:
          $ref: "#/components/schemas/UserNameDTO"
        isBought:
          type: boolean
    UserNameDTO:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
    UserLoginDTO:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    UserRegistrationDTO:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        email:
          type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []